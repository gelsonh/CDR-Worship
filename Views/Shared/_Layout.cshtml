@using CDR_Worship.Models.Enums
@using CDR_Worship.Services.Interfaces
@using Microsoft.AspNetCore.Identity
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@inject IImageService ImageService

@{
    var currentController = ViewContext.RouteData.Values["controller"]?.ToString();
    var currentAction = ViewContext.RouteData.Values["action"]?.ToString();

    if (currentController == "Home" && currentAction == "Index")
    {
        ViewData["ActivePage"] = "Home";
    }
    else if (currentController == "ChordDocuments" && currentAction == "Index")
    {
        ViewData["ActivePage"] = "ChordDocuments";
    }
    else if (currentController == "SongDocuments" && currentAction == "Index")
    {
        ViewData["ActivePage"] = "SongDocuments";
    }
    else if (currentController == "ScheduledSongs" && currentAction == "Index")
    {
        ViewData["ActivePage"] = "ScheduledSongs";
    }
    else if (currentController == "Sms" && currentAction == "Index")
    {
        ViewData["ActivePage"] = "Sms";
    }
    else if (currentController == "Songs" && currentAction == "Index")
    {
        ViewData["ActivePage"] = "Songs";
    }
    else
    {
        ViewData["ActivePage"] = "_Layout"; // Valor predeterminado o para páginas sin correspondencia
    }
}

<!DOCTYPE html>
<html dir="ltr" lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - CDR Worship -</title>

    <!-- Google Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap"
        rel="stylesheet">

    <!-- Favicon icon -->
    <link rel="icon" type="image/png" sizes="32x32" href="~/favicon.ico" />

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

    <!-- Google Icons -->
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />

    <!-- Font Awesome-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
        integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />

    <!-- Custom CSS -->
    @* <link rel="stylesheet" href="~/assets/css/style.css" asp-asp-append-version="true" /> *@
    <link rel="stylesheet" href="~/assets/css/table.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/assets/css/themes.css" asp-append-version="true" />

    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

</head>

<body>

    <header>
        <nav class="navbar navbar-expand-lg navbar-light bg-light shadow-sm">
            <div class="container-fluid">
                <a class="navbar-brand" asp-controller="Home" asp-action="Index">
                    <img src="@Url.Content("~/assets/img/CDRLogo.png")" alt="Logo" style="height: 40px;" />
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    @if (User.Identity?.IsAuthenticated == true)
                    {
                        <ul class="navbar-nav ms-auto">
                            <li class="nav-item @(ViewData["ActivePage"]?.ToString() == "Home" ? "active" : "")">
                                <a class="nav-link rounded-pill" asp-area="" asp-controller="Home" asp-action="Index"
                                    title="Home">Bienvenida</a>
                            </li>
                            <li class="nav-item @(ViewData["ActivePage"]?.ToString() == "SongDocuments" ? "active" : "")">
                                <a class="nav-link rounded-pill" asp-area="" asp-controller="SongDocuments"
                                    asp-action="Index">Letras</a>
                            </li>
                            <li class="nav-item @(ViewData["ActivePage"]?.ToString() == "ChordDocuments" ? "active" : "")">
                                <a class="nav-link rounded-pill" asp-area="" asp-controller="ChordDocuments"
                                    asp-action="Index">Acordes</a>
                            </li>
                            <li class="nav-item @(ViewData["ActivePage"]?.ToString() == "ScheduledSongs" ? "active" : "")">
                                <a class="nav-link rounded-pill" asp-area="" asp-controller="ScheduledSongs"
                                    asp-action="Index">Lista</a>
                            </li>
                            <li class="nav-item @(ViewData["ActivePage"]?.ToString() == "Songs" ? "active" : "")">
                                <a class="nav-link rounded-pill" asp-area="" asp-controller="Songs"
                                    asp-action="Index">Video</a>
                            </li>
                            @if (User.IsInRole("Admin") || User.IsInRole("Moderator"))
                            {
                                <li class="nav-item @(ViewData["ActivePage"]?.ToString() == "Sms" ? "active" : "")">
                                    <a class="nav-link rounded-pill" asp-area="" asp-controller="Sms"
                                        asp-action="Index">Mensajes</a>
                                </li>
                            }

                        </ul>
                    }
                    else
                    {
                        <ul class="navbar-nav ms-auto">
                            <partial name="_LoginPartial" />
                        </ul>
                    }

                    @if (SignInManager.IsSignedIn(User))
                    {
                        <ul class="navbar-nav ms-auto d-flex align-items-center">
                            <!-- Icono de Notificaciones -->
                            <li class="nav-item dropdown me-3">
                                <a class="nav-link position-relative" href="#" id="notificationDropdown" role="button"
                                    data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="bi bi-bell-fill" style="font-size: 1.5rem;"></i>
                                    <!-- Badge de Notificaciones -->
                                    <span id="notificationBadge"
                                        class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                                        style="display: none;">
                                        0
                                        <span class="visually-hidden">nuevos comentarios</span>
                                    </span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="notificationDropdown"
                                    style="width: 300px;">
                                    <li class="dropdown-header">Nuevos Comentarios</li>
                                    <li>
                                        <hr class="dropdown-divider">
                                    </li>
                                    <div id="notificationItems">
                                        <li class="dropdown-item text-center">No hay nuevos comentarios.</li>
                                    </div>
                                </ul>
                            </li>

                            <!-- Dropdown del Usuario -->
                            <li class="nav-item dropdown">
                                @if (User.Identity?.IsAuthenticated == true)
                                {
                                    var user = await UserManager.GetUserAsync(User);
                                    var Image = ImageService.ConvertByteArrayToFile(user?.ImageFileData, user?.ImageFileType,
                                    DefaultImage.UserImage);

                                    <a class="nav-link dropdown-toggle user-dropdown d-flex align-items-center" href="#"
                                        id="userDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        <img src="@Image" alt="Profile Image" class="rounded-circle me-1"
                                            style="width: 40px; height: 40px; object-fit: cover;" />
                                        <span class="user-name ms-1">@user?.FirstName</span>
                                    </a>

                                    <ul class="dropdown-menu dropdown-menu-end shadow" aria-labelledby="userDropdown">
                                        <li class="dropdown-header">
                                            <div class="d-flex align-items-center p-3">
                                                <img src="@Image" alt="Profile Image" class="rounded-circle me-3"
                                                    style="width: 60px; height: 60px; object-fit: cover;">
                                                <div>
                                                    <h5 class="mb-0" style="color: var(--gh-theme-600);">@user?.FirstName
                                                        @user?.LastName</h5>
                                                </div>
                                            </div>
                                        </li>
                                        <li>
                                            <hr class="dropdown-divider">
                                        </li>
                                        <li>
                                            @{
                                                var currentUser = await UserManager.GetUserAsync(User);
                                                var isDemoUser = currentUser != null && await UserManager.IsInRoleAsync(currentUser,
                                                "DemoUser");
                                            }

                                            @if (!isDemoUser)
                                            {
                                                <a class="dropdown-item" asp-area="Identity" asp-page="/Account/Manage/Index"
                                                    asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })"
                                                    style="color: var(--gh-theme-900);">
                                                    <i class="bi bi-gear me-2"></i>Cuenta
                                                </a>
                                            }
                                            <a class="dropdown-item" asp-area="Identity" asp-page="/Account/Logout"
                                                asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })"
                                                style="color: var(--gh-theme-900);">
                                                <i class="bi bi-box-arrow-left me-2"></i>Cerrar Sesión
                                            </a>
                                        </li>
                                    </ul>
                                }
                            </li>
                        </ul>
                    }
                </div>
            </div>
        </nav>
    </header>


    <div class="container">
        @RenderBody()
    </div>

    <footer class="footer mt-auto bg-light py-5 shadow-lg">
        <div class="container-fluid text-center">
            <div class="mb-4">
                <img src="~/assets/img/CDRLogo.png" alt="Logo" style="height: 50px; width: auto;" />
            </div>
            <h5 class="text-dark">CDR Worship</h5>
            <p class="text-muted">"Vengan, cantemos con júbilo al Señor; aclamemos a la roca de nuestra salvación." -
                Salmo 95:1 (DHH)</p>
            <div class="social-links mb-3">
                <a href="#" class="text-dark mx-2">
                    <i class="bi bi-facebook" style="font-size: 1.5rem;"></i>
                </a>

                <a href="#" class="text-dark mx-2">
                    <i class="bi bi-instagram" style="font-size: 1.5rem;"></i>
                </a>
                <a href="#" class="text-dark mx-2">
                    <i class="bi bi-youtube" style="font-size: 1.5rem;"></i>
                </a>
            </div>
            <div class="text-dark">
                <span>Creado por Gelson Hernandez</span>
                <br />
                <span>© 2024 - CDR Worship -</span>
            </div>
        </div>
    </footer>

    <div class="loading-overlay" id="loadingOverlay">
        <div class="loader">
            <svg height="800" viewBox="0 0 512.026 512.026" width="800" xmlns="http://www.w3.org/2000/svg"
                class="people-svg">
                <path
                    d="m98.142 337.318-60.723 35.046c-4.079 2.355-5.478 7.569-3.123 11.657 1.579 2.739 4.446 4.267 7.398 4.267 1.442 0 2.91-.367 4.258-1.143l60.723-35.038c4.079-2.355 5.478-7.578 3.123-11.657-2.355-4.087-7.577-5.487-11.656-3.132z" />
                <path
                    d="m119.475 256.021c0-4.71-3.823-8.533-8.533-8.533l-102.409-.009c-4.71 0-8.533 3.823-8.533 8.533 0 4.719 3.823 8.533 8.533 8.533l102.409.009c4.71.001 8.533-3.822 8.533-8.533z" />
                <path
                    d="m146.236 82.948c1.579 2.739 4.446 4.267 7.398 4.267 1.442 0 2.918-.367 4.258-1.143 4.079-2.355 5.478-7.578 3.123-11.656l-21.35-36.983c-2.364-4.079-7.586-5.487-11.657-3.123-4.087 2.355-5.478 7.578-3.123 11.657z" />
                <path
                    d="m37.427 139.669 86.315 49.852c1.34.776 2.807 1.143 4.258 1.143 2.953 0 5.82-1.527 7.398-4.267 2.355-4.079.964-9.301-3.123-11.648l-86.315-49.86c-4.07-2.364-9.31-.964-11.656 3.123-2.355 4.08-.964 9.302 3.123 11.657z" />
                <path
                    d="m376.619 186.398c1.579 2.739 4.446 4.267 7.398 4.267 1.442 0 2.91-.367 4.258-1.143l86.332-49.835c4.087-2.364 5.478-7.578 3.123-11.665-2.355-4.079-7.578-5.478-11.657-3.123l-86.332 49.843c-4.087 2.355-5.478 7.577-3.122 11.656z" />
                <path
                    d="m354.142 86.071c1.348.777 2.816 1.143 4.258 1.143 2.953 0 5.82-1.527 7.398-4.267l21.35-36.983c2.355-4.079.956-9.301-3.123-11.657-4.096-2.364-9.301-.956-11.657 3.123l-21.35 36.983c-2.354 4.081-.964 9.303 3.124 11.658z" />
                <path
                    d="m344.038 495.381c-.23-.077-23.868-8.073-39.33-23.535-15.326-15.326-23.1-30.524-23.1-45.167v-153.6c0-1.749.358-17.067 12.8-17.067 9.156 0 12.774 17.741 12.826 17.732l8.533 110.925c.358 4.685 4.395 8.235 9.165 7.851 4.693-.358 8.218-4.463 7.851-9.165l-8.627-111.684c-2.022-12.151-10.564-32.725-29.747-32.725-23.629 0-29.867 22.332-29.867 34.133v153.6c0 19.337 9.455 38.588 28.1 57.233 18.278 18.287 44.877 27.29 46.003 27.665.896.299 1.809.435 2.696.435 3.576 0 6.904-2.261 8.098-5.837 1.494-4.47-.929-9.3-5.401-10.794z" />
                <path
                    d="m217.609 238.946c-19.183 0-27.725 20.574-29.841 33.476l-8.533 110.933c-.367 4.702 3.157 8.806 7.851 9.165 4.608.35 8.806-3.157 9.165-7.851l8.439-110.182c.034-.188 3.661-18.475 12.919-18.475 12.006 0 12.774 14.251 12.8 17.067v153.6c0 14.643-7.774 29.841-23.1 45.167-15.377 15.377-39.108 23.458-39.339 23.543-4.463 1.502-6.878 6.332-5.385 10.795 1.195 3.567 4.523 5.828 8.09 5.828.896 0 1.801-.145 2.697-.435 1.126-.375 27.725-9.378 46.003-27.665 18.645-18.645 28.1-37.897 28.1-57.233v-153.6c-0-11.801-6.238-34.133-29.866-34.133z" />
                <path
                    d="m491.529 496.653-102.494-76.868c-5.402-3.942-11.247-17.894-13.653-28.501l-25.677-171.076c-1.86-9.318-3.618-18.33-5.316-26.999-15.223-77.901-24.414-124.928-54.246-124.928-17.946 0-25.6 7.654-25.6 25.6 0 17.195 8.209 124.109 8.559 128.657.358 4.685 4.471 8.209 9.165 7.851 4.693-.358 8.218-4.463 7.851-9.165-.085-1.109-8.508-110.797-8.508-127.343 0-8.533.162-8.533 8.533-8.533 15.778 0 26.325 53.982 37.504 111.138 1.69 8.687 3.456 17.724 5.257 26.658l25.711 171.281c.674 2.97 6.938 29.363 20.275 39.083l102.4 76.8c1.536 1.152 3.336 1.707 5.111 1.707 2.594 0 5.163-1.178 6.835-3.413 2.824-3.774 2.064-9.125-1.707-11.949z" />
                <path
                    d="m466.057 387.162c1.348.777 2.816 1.143 4.258 1.143 2.953 0 5.82-1.527 7.398-4.267 2.355-4.079.964-9.301-3.123-11.657l-60.715-35.063c-4.096-2.355-9.301-.956-11.657 3.132-2.355 4.079-.964 9.293 3.123 11.657z" />
                <path
                    d="m503.492 247.497h-102.417c-4.71 0-8.533 3.823-8.533 8.533s3.823 8.533 8.533 8.533h102.417c4.71 0 8.533-3.814 8.533-8.533.001-4.711-3.822-8.533-8.533-8.533z" />
                <path
                    d="m264.542 8.546c0-4.71-3.823-8.533-8.533-8.533s-8.533 3.823-8.533 8.533v25.6c0 4.71 3.823 8.533 8.533 8.533s8.533-3.823 8.533-8.533z" />
                <path
                    d="m221.875 68.279c-29.833 0-39.023 47.027-54.246 124.928-1.698 8.67-3.456 17.681-5.393 27.409l-25.626 170.863c-1.348 10.624-7.97 24.738-13.722 28.373l-102.4 76.8c-3.772 2.825-4.531 8.175-1.707 11.947 1.673 2.236 4.241 3.413 6.835 3.413 1.775 0 3.575-.555 5.111-1.707l101.803-76.39c11.785-7.364 19.507-28.399 20.983-40.107l25.523-170.257c1.877-9.344 3.644-18.381 5.333-27.068 11.179-57.156 21.726-111.138 37.504-111.138 8.371 0 8.533 0 8.533 8.533 0 16.546-8.422 126.234-8.508 127.343-.367 4.702 3.157 8.806 7.851 9.165 4.642.35 8.798-3.157 9.165-7.851.35-4.548 8.559-111.462 8.559-128.657.002-17.944-7.652-25.599-25.598-25.599z" />
            </svg>
            <div class="circle-loader"></div>
        </div>
    </div>

    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>

    <!-- jQuery Validate -->
    @* <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <script
    src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
    *@

    <script src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.19.3/jquery.validate.min.js"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/mvc/5.2.3/jquery.validate.unobtrusive.min.js"></script>

    <!-- SignalR -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.12/signalr.min.js"></script>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>

    <!-- Custom JS -->
    <script src="~/js/site.js" asp-append-version="true"></script>

    <!-- PDF.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>
    <!-- Otros scripts aquí -->
    <!-- SweetAlert CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- Howler CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.3/howler.min.js"></script>


    <script>
        // Objeto para almacenar nuevos comentarios por scheduleSongId
        let newComments = {};

        // Función para reproducir el sonido de notificación
        function playNotificationSound() {
            const soundToggle = document.getElementById('soundToggle');
            if (soundToggle && soundToggle.checked) {
                const newCommentSound = new Audio('/sounds/new-comment.wav');
                newCommentSound.volume = 0.5;
                newCommentSound.play().catch(function (error) {
                    console.error('Error al reproducir el sonido:', error);
                });
            }
        }

        // Conectar al hub de SignalR en todas las vistas
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/commentHub")
            .build();

        // Intentar iniciar la conexión de SignalR
        connection.start().then(() => {
            console.log("Conectado al Hub de Comentarios");
        }).catch(err => console.error('Error al conectar con SignalR:', err.toString()));

        // Escuchar el método "ReceiveComment" desde el servidor
        connection.on("ReceiveComment", function (commentData) {
            console.log("Comentario recibido:", commentData);

            // Convertir UTC a hora local
            var utcDate = new Date(commentData.commentCreated);
            var localDate = utcDate.toLocaleString('es-ES', {
                weekday: 'short',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: true
            });

            // Actualizar el HTML para mostrar el nuevo comentario sin necesidad de refresh
            var newCommentHtml = `
        <div class="comment mb-3">
            <div class="d-flex align-items-start">
                <img src="${commentData.commentUserImage}" alt="Profile Image" class="profile-image me-3">
                <div>
                    <div class="d-flex align-items-center">
                        <div class="user-name fw-bold">${commentData.commentUserName}</div>
                        <div class="comment-time ms-2">${localDate}</div>
                    </div>
                    <div class="comment-text">${commentData.commentText}</div>
                </div>
            </div>
        </div>`;

            // Insertar el comentario al final de la lista de comentarios
            var commentsList = document.querySelector('.comments-list');
            if (!commentsList) {
                commentsList = document.createElement('div');
                commentsList.className = 'comments-list';
                document.querySelector('.comments-section').prepend(commentsList);
            }
            commentsList.insertAdjacentHTML('beforeend', newCommentHtml);

            // Auto-scroll hacia el último comentario
            commentsList.scrollTop = commentsList.scrollHeight;


            // Agregar el comentario a la notificación
            const scheduleSongId = commentData.scheduleSongId;
            if (!newComments[scheduleSongId]) {
                newComments[scheduleSongId] = { count: 0, comments: [] };
            }
            newComments[scheduleSongId].count += 1;
            newComments[scheduleSongId].comments.push(commentData);

            localStorage.setItem('newComments', JSON.stringify(newComments));
            updateNotificationBadge();
            updateNotificationDropdown();

            playNotificationSound();
        });

        // Función para actualizar el badge de notificaciones
        function updateNotificationBadge() {
            const badge = document.getElementById('notificationBadge');
            const totalNewComments = Object.values(newComments).reduce((acc, curr) => acc + curr.count, 0);
            badge.style.display = totalNewComments > 0 ? 'inline-block' : 'none';
            badge.textContent = totalNewComments > 99 ? '99+' : totalNewComments;
        }

        // Función para actualizar el dropdown de notificaciones
        function updateNotificationDropdown() {
            const notificationItems = document.getElementById('notificationItems');
            notificationItems.innerHTML = '';

            const scheduleSongIds = Object.keys(newComments);
            if (scheduleSongIds.length === 0) {
                const noNotificationsItem = document.createElement('li');
                noNotificationsItem.classList.add('dropdown-item', 'text-center');
                noNotificationsItem.textContent = 'No hay nuevos comentarios.';
                notificationItems.appendChild(noNotificationsItem);
            } else {
                scheduleSongIds.forEach(scheduleSongId => {
                    const schedule = newComments[scheduleSongId];
                    const scheduleSongName = schedule.comments[0].name;

                    const scheduleTitle = document.createElement('li');
                    scheduleTitle.classList.add('dropdown-header');
                    scheduleTitle.textContent = `- ${scheduleSongName} -`;
                    notificationItems.appendChild(scheduleTitle);

                    schedule.comments.forEach(comment => {
                        const commentItem = document.createElement('li');
                        const commentLink = document.createElement('a');
                        commentLink.classList.add('dropdown-item');
                        commentLink.href = `/ScheduledSongs/Details/${scheduleSongId}`;
                        commentLink.textContent = `${comment.commentUserName}: ${truncateText(comment.commentText, 50)}`;

                        // Listener para eliminar notificación cuando se hace clic en el link
                        commentLink.addEventListener('click', () => {
                            delete newComments[scheduleSongId];
                            localStorage.setItem('newComments', JSON.stringify(newComments));
                            updateNotificationBadge();
                            updateNotificationDropdown();
                        });

                        commentItem.appendChild(commentLink);
                        notificationItems.appendChild(commentItem);
                    });

                    const divider = document.createElement('li');
                    divider.innerHTML = '<hr class="dropdown-divider">';
                    notificationItems.appendChild(divider);
                });
                if (notificationItems.lastChild?.firstChild.tagName === 'HR') {
                    notificationItems.removeChild(notificationItems.lastChild);
                }
            }
        }

        // Función para truncar texto largo
        function truncateText(text, maxLength) {
            return text.length <= maxLength ? text : text.substring(0, maxLength) + '...';
        }

        // Hover para el dropdown de notificaciones
        const notificationDropdown = document.getElementById('notificationDropdown');
        const dropdownMenu = notificationDropdown.nextElementSibling;

        notificationDropdown.addEventListener('mouseenter', () => new bootstrap.Dropdown(notificationDropdown).show());
        notificationDropdown.addEventListener('mouseleave', () => new bootstrap.Dropdown(notificationDropdown).hide());
        dropdownMenu.addEventListener('mouseenter', () => new bootstrap.Dropdown(notificationDropdown).show());
        dropdownMenu.addEventListener('mouseleave', () => new bootstrap.Dropdown(notificationDropdown).hide());

        // Cargar notificaciones desde localStorage al iniciar
        document.addEventListener('DOMContentLoaded', function () {
            const storedComments = localStorage.getItem('newComments');
            if (storedComments) {
                newComments = JSON.parse(storedComments);
                updateNotificationBadge();
                updateNotificationDropdown();
            }

            // Eliminar notificaciones cuando se accede directamente al detalle desde la URL
            const path = window.location.pathname;
            const match = path.match(/\/ScheduledSongs\/Details\/(\d+)/);
            if (match && match[1]) {
                const scheduleSongId = match[1];
                if (newComments[scheduleSongId]) {
                    delete newComments[scheduleSongId];
                    localStorage.setItem('newComments', JSON.stringify(newComments));
                    updateNotificationBadge();
                    updateNotificationDropdown();
                }
            }
        });
    </script>


    <!-- Table -->
    <script>
        $(document).ready(function () {
            // Initialize tooltips in the table if the tooltip plugin is available
            if ($.fn.tooltip) {
                $('[data-toggle="tooltip"]').tooltip();
            }

            // Check if the row count selector and table body exist before manipulating them
            const rowCountSelect = $('#rowCount');
            const tableBody = $('#songTableBody');
            if (rowCountSelect.length && tableBody.length) {
                const allRows = tableBody.find('tr');

                // Update the table to show only the specified number of rows based on the selected row count
                function updateTable() {
                    const rowCount = parseInt(rowCountSelect.val());
                    allRows.each(function (index, row) {
                        $(row).toggle(index < rowCount); // Show or hide rows based on the selected number
                    });
                }

                // Update the table whenever the row count changes
                rowCountSelect.on('change', updateTable);
                updateTable(); // Initial call to set the table based on the current selection
            }

            // Add search functionality to filter table rows based on user input
            const searchInput = $('#searchInput');
            if (searchInput.length && tableBody.length) {
                searchInput.on('keyup', function () {
                    const value = searchInput.val().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
                    tableBody.find('tr').each(function () {
                        const row = $(this);
                        // Normalize row text to remove accents for accurate comparison
                        const rowText = row.text().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
                        // Show or hide rows based on whether the row text contains the search input
                        row.toggle(rowText.includes(value));
                    });
                });
            }
        });
    </script>

    <!-- Función para mostrar el loading -->
    <script>
        function showLoading() {
            document.getElementById('loadingOverlay').classList.add('active');
        }

        // Función para ocultar el loading
        function hideLoading() {
            document.getElementById('loadingOverlay').classList.remove('active');
        }

        // Simula la carga de contenido
        document.addEventListener('DOMContentLoaded', function () {
            showLoading();
            setTimeout(hideLoading, 300); // Oculta el loading después de 2 segundos (puedes modificar este tiempo)
        });
    </script>

    @await RenderSectionAsync("Scripts", required: false)

</body>

</html>
